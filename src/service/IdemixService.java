package service;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import net.sourceforge.scuba.smartcards.CardService;
import net.sourceforge.scuba.smartcards.CardServiceException;
import net.sourceforge.scuba.smartcards.ICommandAPDU;
import net.sourceforge.scuba.smartcards.IResponseAPDU;
import net.sourceforge.scuba.util.Hex;

import com.ibm.zurich.idmx.api.ProverInterface;
import com.ibm.zurich.idmx.api.RecipientInterface;
import com.ibm.zurich.idmx.dm.Credential;
import com.ibm.zurich.idmx.dm.Values;
import com.ibm.zurich.idmx.issuance.IssuanceSpec;
import com.ibm.zurich.idmx.issuance.Message;
import com.ibm.zurich.idmx.showproof.Proof;
import com.ibm.zurich.idmx.showproof.ProofSpec;

public class IdemixService implements ProverInterface, RecipientInterface {
    /**
     * Control the amount of output generated by this class.
     */
    private static final boolean VERBOSE = true;
    
	/**
	* SCUBA service to communicate with the card.
	*/
	protected CardService service;
	
	protected IssuanceSpec issuanceSpec;
	
	protected short credentialId;
	
	public IdemixService(CardService service, short credentialId) {
		this.service = service;
		this.credentialId = credentialId; 
	}
	
    public HashMap<String,IResponseAPDU> executeCommands(List<ProtocolCommand> commands) throws CardServiceException {
    	HashMap<String,IResponseAPDU> responses = new HashMap<String, IResponseAPDU>();
        for (ProtocolCommand c: commands) {
        	IResponseAPDU response = transmit(service, c.command);
        	responses.put(c.key, response);
        	if (response.getSW() != 0x00009000) {
        		// don't bother with the rest of the commands...
        		// TODO: get error message from global table
        		String errorMessage = c.errorMap != null && c.errorMap.containsKey(response.getSW()) ? c.errorMap.get(response.getSW()) : "";
        		throw new CardServiceException(String.format("Command failed: \"%s\", SW: %04x (%s)",c.description, response.getSW(), errorMessage ));
        	}
        }
    	return responses;
    }


    
    
    ///////////////////////////////
    
    /**
     * Open a communication channel to an Idemix applet.
     */
    public void open() throws CardServiceException {
        if (!service.isOpen()) {
            service.open();
        }
        executeCommands(IdemixSmartcard.singleCommand(IdemixSmartcard.selectAppletCommand));
    }
    
    /**
     * Send an APDU over the communication channel to the smart card.
     * 
     * @param apdu the APDU to be send to the smart card.
     * @return ResponseAPDU the response from the smart card.
     * @throws CardServiceException if some error occurred while transmitting.
     */
    public static IResponseAPDU transmit(CardService service, ICommandAPDU capdu) 
    throws CardServiceException { 

        if (VERBOSE) {
            System.out.println();
            System.out.println("C: " + Hex.bytesToHexString(capdu.getBytes()));    		
        }

        long start = System.nanoTime();
        IResponseAPDU rapdu = service.transmit(capdu);
        long duration = (System.nanoTime() - start)/1000000;

        if (VERBOSE) {
            System.out.println(" duration: " + duration + " ms");
            System.out.println("R: " + Hex.bytesToHexString(rapdu.getBytes()));
        }

        return rapdu;
    }
    

    /**
     * Close the communication channel with the Idemix applet.
     * TODO: WL: why is CardService a parameter here while it
     * is a class member?
     */
    @Deprecated
    public void close(CardService service) {
        if (service != null) {
            service.close();
        }
    }
    
    /**
     * Close the communication channel with the Idemix applet.
     */
    public void close() {
    	if (service != null) {
    		service.close();
    	}
    }
    
    /**
     * Select the Idemix applet on the smart card.
     * 
     * @throws CardServiceException if an error occurred.
     */
    public void selectApplet() 
    throws CardServiceException {
    	executeCommands(IdemixSmartcard.singleCommand(IdemixSmartcard.selectAppletCommand));
    }
    
    /**
     * Send the pin to the card
     *
     * @throws CardServiceException if an error occurred.
     */
    public void sendPin(byte[] pin)
    throws CardServiceException {
        executeCommands(IdemixSmartcard.singleCommand(IdemixSmartcard.sendPinCommand(pin)));
    }
    
    /**
	 * Update the pin on the card
	 *
	 * Note that to use this function one first needs to establish an
	 * authenticated connection to the card.
	 */
    public void updatePin(byte[] pin)
    throws CardServiceException {
    	executeCommands(IdemixSmartcard.singleCommand(IdemixSmartcard.updatePinCommand(pin)));
    }

    /**
     * Generate the master secret: 
     * 
     * <pre>
     *   m_0
     * </pre>
     * 
     * @throws CardServiceException if an error occurred.
     */
    public void generateMasterSecret() 
    throws CardServiceException {
    	ArrayList<ProtocolCommand> commands = new ArrayList<ProtocolCommand>();
    	commands.add(IdemixSmartcard.generateMasterSecretCommand);
    	executeCommands(commands);
    }
    
    /**
     * @param theNonce1
     *            Nonce provided by the verifier.
     * @return Message containing the proof about the hidden and committed
     *         attributes sent to the Issuer.
     */
    public Message round1(final Message msg) {
        try {
			return IdemixSmartcard.processRound1Responses(
					executeCommands(
							IdemixSmartcard.round1Commands(issuanceSpec, msg)));
		} catch (CardServiceException e) {
            System.err.println(e.getMessage() + "\n");
            e.printStackTrace();
            return null;
		}
    }
    
    
    /**
     * Called with the second protocol flow as input, outputs the Credential.
     * This is the last step of the issuance protocol, where the Recipient
     * verifies that the signature is valid and outputs it.
     * 
     * @param msg
     *            the second flow of the protocol, a message from the Issuer
     * @return null
     */
    public Credential round3(final Message msg) {
        // Hide CardServiceExceptions, instead return null on failure
        try {
            // send Signature
        	executeCommands(IdemixSmartcard.round3Commands(issuanceSpec, msg));
            
            // Do NOT return the generated Idemix credential
            return null;
            
        // Report caught exceptions
        } catch (CardServiceException e) {
            System.err.println(e.getMessage() + "\n");
            e.printStackTrace();
            return null;
        }
    }    
    
    /**
     * Builds an Identity mixer show-proof data structure, which can be passed
     * to the verifier for verification.
     * 
     * @return Identity mixer show-proof data structure.
     */
    public Proof buildProof(final BigInteger nonce, final ProofSpec spec) {
        // Hide CardServiceExceptions, instead return null on failure
        try {            
        	return IdemixSmartcard.processBuildProofResponses(executeCommands(IdemixSmartcard.buildProofCommands(nonce, spec, credentialId)), spec);
        // Report caught exceptions
        } catch (CardServiceException e) {
            System.err.println(e.getMessage() + "\n");
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * Set the specification of a certificate issuance: 
     * 
     * <ul>
     *   <li> issuer public key, and 
     *   <li> context. 
     * </ul>
     * 
     * @param spec the specification to be set.
     * @throws CardServiceException if an error occurred.
     */
    public void setIssuanceSpecification(IssuanceSpec spec) throws CardServiceException {
    	issuanceSpec = spec;
    	executeCommands(IdemixSmartcard.setIssuanceSpecificationCommands(spec, credentialId));
    }
    
    /**
     * Set the attributes: 
     * 
     * <pre>
     *   m_1, ..., m_l
     * </pre>
     * 
     * @param spec the issuance specification for the ordering of the values.
     * @param values the attributes to be set.
     * @throws CardServiceException if an error occurred.
     */
    public void setAttributes(IssuanceSpec spec, Values values) throws CardServiceException {
        executeCommands(IdemixSmartcard.setAttributesCommands(spec, values));
    }	
}
